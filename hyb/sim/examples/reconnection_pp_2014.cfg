# Laitinen T.V., Jarvinen R., Kallio E., and Janhunen P. (2014),
# Forcing continuous reconnection in hybrid simulations, Phys. Plasmas
# 21, 072906, doi:10.1063/1.4890854

# Use these Makefile options:

# PERIODIC_FIELDS_Y := true
# RECONNECTION_GEOMETRY := true

# Pi [] (real)
#const Pi 3.1415926536e+00

# Speed of light in vacuum [m/s] (real)
#const c 2.9979245800e+08

# Electron charge magnitude [C] (real)
#const e 1.6021765300e-19

# Boltzmann constant [J/K] (real)
#const k_B 1.3806505000e-23

# Permeability of free space [N A^-2] (real)
#const mu_0 1.2566370614e-06

# Permittivity of free space [F/m] (real)
#const eps_0 8.8541878176e-12

# Gravitational constant [m^3 kg^-1 s^-2] (real)
#const G 6.6742000000e-11

# Astronomical unit [m] (real)
#const AU 1.4959787066e+11

# Adiabatic constant [] (real)
#const gamma 1.6666666667e+00

# Atomic mass unit [kg] (real)
#const amu 1.6605388600e-27

# Electron mass [kg] (real)
#const m_e 9.1093825746e-31

# Proton mass [kg] (real)
#const m_p 1.6726217160e-27

# Atomic hydrogen mass [kg] (real)
#const m_H 1.6737235385e-27

# Hydrogen molecule mass [kg] (real)
#const m_H2 3.3473142340e-27

# Atomic deuterium (hydrogen-2) mass [kg] (real)
#const m_2H 3.3435833564e-27

# Atomic tritium (hydrogen-3) mass [kg] (real)
#const m_3H 5.0082669003e-27

# Atomic helium-3 mass [kg] (real)
#const m_3He 5.0082338555e-27

# Atomic helium mass [kg] (real)
#const m_He 6.6464761621e-27

# Atomic nitrogen mass [kg] (real)
#const m_N 2.3258736072e-26

# Molecular nitrogen mass [kg] (real)
#const m_N2 4.6517339301e-26

# Atomic oxygen mass [kg] (real)
#const m_O 2.6567625437e-26

# Molecular oxygen mass [kg] (real)
#const m_O2 5.3135250873e-26

# Molecular methane mass [kg] (real)
#const m_CH4 2.6639360715e-26

# Atomic sodium (natrium) mass [kg] (real)
#const m_Na 3.8175405272e-26

# Mercury mass [kg] (real)
#const M_Me 3.3020000000e+23

# Mercury radius [m] (real)
#const R_Me 2.4397000000e+06

# Venus mass [kg] (real)
#const M_V 4.8685000000e+24

# Venus radius [m] (real)
#const R_V 6.0518000000e+06

# Moon mass [kg] (real)
#const M_Mo 7.3490000000e+22

# Moon radius [m] (real)
#const R_Mo 1.7371000000e+06

# Mars mass [kg] (real)
#const M_Ma 6.4185000000e+23

# Mars radius [m] (real)
#const R_Ma 3.3900000000e+06

# Titan mass [kg] (real)
#const M_T 1.3455000000e+23

# Titan radius [m] (real)
#const R_T 2.5750000000e+06

# Simulation time [s] (real)
#const t 0.0000000000e+00

# Template real variable [-] (real)
#tempRealA 0.0000000000e+00

# Template real variable [-] (real)
#tempRealB 0.0000000000e+00

# Template real variable [-] (real)
#tempRealC 0.0000000000e+00

# Template int variable [-] (integer)
#tempIntA 0

# Template int variable [-] (integer)
#tempIntB 0

# Template int variable [-] (integer)
#tempIntC 0

# Object ID for the Hybrid Web Archive: 0 = Unspecified, 1 = Mercury, 2 = Venus, 3 = Earth, 4 = Moon, 5 = Mars, 6 = Asteroid, 7 = Ganymede, 8 = Titan, 9 = Pluto, 10 = Comet, 11 = Heliosphere/solar wind, 12 = Exoplanet [-] (integer)
iniconst objectIdHWA 0

# Planet radius [m] (real)
iniconst R_P 100e3

# Planet mass [kg] (real)
#iniconst M_P 1.0

# Fields U_e and U are put explicitly to zero inside this radius [m] (real)
#R_zeroFields -100

# Field propagation using predictor corrector scheme [] (boolean)
fieldPredCor 0

# Electron pressure effect [] (boolean) (Define electron temperature if this is true)
electronPressure 1

# Electron temperature (K)
Te 1e4

# Gravitational acceleration for ions [-] (boolean)
useGravitationalAcceleration 0

# Calculation of J using jstag scheme [-] (boolean)
useJstag 1

# Calculation of Ue separately in nodes [-] (boolean)
useNodeUe 1

# Base grid cell size [m] (real)
iniconst dx =R_P 0.5 *;

# Simulation timestep [s] (real)
dt =dx 1.0e7 /;

# Field propagation timestep - should be mostly same as dt [s] (real)
dtField =dt;

# Constraint: maximum ion velocity [m/s] (real)
vi_max 5000e3

# Constraint: maximum electron velocity [m/s] (real)
Ue_max 5000e3

# Constraint: minimum charge density in a cell, rho_q = max(rho_q, rho_q_min) [C/m^3] (real)
rho_q_min =1e5 e *;

# Number of density variable smoothing [] (integer)
densitySmoothingNumber 0

# Number of electric field smoothing [] (integer)
electricFieldSmoothingNumber 0

# Duration of simulation run [s] (real)
t_max 200.1

# Save interval for output files [s] (real)
saveInterval 5.0

# Whether to save HC files (0 = no, 1 = binary, 2 = ascii) [-] (integer)
saveHC 1

# Whether to save VTK files (0 = no, 1 = binary, 2 = ascii) [-] (integer)
saveVTK 1

# Whether to save (1) or not (0) temporally averaged parameters [-] (boolean)
averaging 1

# Whether to save (1) or not (0) plasma hc-file [-] (boolean)
plasma_hcfile 0

# Whether to save (1) or not (0) dbug hc-file [-] (boolean)
dbug_hcfile 1

# Include bg charge density (1) or not (0) in average hc-file [-] (boolean)
bg_in_avehcfile 1

# Save extra hc-files [-] (boolean)
iniconst saveExtraHcFiles 1

# Breakpointing intervals (first = cyclic, second = unique file names) - PRODUCES LARGE FILES! [s] (real)
#wsDumpInterval 0 0

# Input parameter dynamics interval [s] (real)
inputInterval =saveInterval;

# Logging interval [s] (real)
logInterval 1.0

# Particles along orbit: Whether to save particles along a given spacecraft orbit (creates two files: particles_along_orbit_cellindices.dat and particles_along_orbit.dat)  [-] (boolean)
#saveParticlesAlongOrbit =t 250 - stepup t 260 - stepdown *;

# Particles along orbit: Orbit file name if saving particles along a spacecraft orbit (three columns: x, y, z in meters) [-] (string)
#saveParticlesAlongOrbitFile orbitfile.dat

# Particle cell spectra: Emin [eV] (real)
#spectraEmin_eV 10

# Particle cell spectra: Emax [eV] (real)
#spectraEmax_eV 30e3

# Particle cell spectra: number of bins [-] (integer)
#spectraNbins 20

# Particle cell spectra: logarithmic binning [-] (boolean)
#spectraLogBins 1

# Particle cell spectra: include all E<Emin energies in the Emin bin [-] (boolean)
#spectraEminAll 1

# Particle cell spectra: include all E>Emax energies in the Emax bin [-] (boolean)
#spectraEmaxAll 1

# Particle cell spectra: method to create spectra [-] (integer)
#spectraMethod 1

# Grid Refinement function [-] (function)
#iniconst gridRefinementFUNC { }

# Maximum allowed grid refinement level [] (integer)
iniconst maxGridRefinementLevel 0

# Forbid split and join (spatial) function [-] (function)
#forbidSplitAndJoinFUNC { }

# Background charge density [-] (function)
#bgChargeDensityFUNC {  }

# Polarization electric field is neglected inside this radius [m] (real)
#R_zeroPolarizationField -100

# Average amount of macroparticles per cell [#] (integer)
macroParticlesPerCell 50

# Macro particle splitting [-] (boolean)
useMacroParticleSplitting 1

#  Macro particle joining [-] (boolean)
useMacroParticleJoining 1

# Deviation allowed in splitting and joining, and probability method (0=old,1=new) (real)
splitJoinDeviation 0.2 0

# Macroparticle splitting function (function)
splitFUNC {splitDefault 0.5}

# Macroparticle joining function (function)
joinFUNC {joinDefault}

# Resistivity function [-] (function)

# Run 1: Constant resistivity (Cr-run)
#iniconst resistivityFUNC
#{
# resistivityConstant 0.06
#}

# Run 2: Localized resistivity (Lr-run)
iniconst resistivityFUNC
{
 resistivityCartesian 0.18 0.06 =2.0 R_P *; =20.0 R_P *; =2.0 R_P *; =10.0 R_P *; =25.0 R_P *; =10.0 R_P *;
}

# Simulation Box: x_min [m] (fastreal)
iniconst box_xmin =-30.0 R_P *;

# Simulation Box: x_max [m] (fastreal)
iniconst box_xmax =30.0 R_P *;

# Simulation Box: y_min [m] (fastreal)
iniconst box_ymin =-2.5 R_P *;

# Simulation Box: y_max [m] (fastreal)
iniconst box_ymax =2.5 R_P *;

# Simulation Box: z_min [m] (fastreal)
iniconst box_zmin =-35.0 R_P *;

# Simulation Box: z_max [m] (fastreal)
iniconst box_zmax =35.0 R_P *;

# Constraint: simulation box tight limit factor [] (fastreal)
iniconst box_eps 1.0e-2

# Limit for the maximum magnetic field strength [T] (real)
B_limit 10000.0e-9

# Electric field cut value (used if Ecut > 0). dx*max(dB/dt) ~ Ecut [V/m] (real)
Ecut -100

# Interplanetary Magnetic Field: x-component [T] (real)
iniconst SW_Bx 0.0

# Interplanetary Magnetic Field: y-component [T] (real)
SW_By 0.0

# Interplanetary Magnetic Field: z-component [T] (real)
SW_Bz 50.0e-9

# Magnetic field boundary conditions (+X, +/-Y, +/-Z, -X, perpendicular) [] (boolean)
Bboundaries 1 0 0 1 0

# Magnetic field x-components at the box boundary [T] (real)
boundary_Bx 0.0

# Magnetic field y-components at the box boundary [T] (real)
boundary_By =SW_By;

# Magnetic field z-components at the box boundary [T] (real)
boundary_Bz =SW_Bz;

# Initial magnetic field functions [-] (function)
#iniconst initialMagneticFieldFUNC { }

# Constant magnetic field functions [-] (function)
#iniconst constantMagneticFieldFUNC { }

population uniform
{
 idStr initial_plasma
 hcFilePrefix H+
 logParams 0
 m =m_p;
 q =e;
 n 1.5e6
 T 1e3
 #vth
 boundaryFUNC
 {
  obstacleNoObstacle
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 V 0
 #macroParticlesPerDt
 propagateV 1
 accumulate 1
 split 0
 join 1
}

population solarwind
{
 idStr solarwind_H+
 hcFilePrefix H+
 logParams 0
 m =m_p;
 q =e;
 n 10e6
 V 100e3
 T 1e5
 #vth
 boundaryFUNC
 {
  obstacleNoObstacle
  sideWallPeriodicYAbsorbZ
  frontWallAbsorb
  backWallAbsorb
 }
 #macroParticlesPerDt 
 propagateV 1
 accumulate 1
 split 1
 join 1
}

population solarwind
{
 idStr antisolarwind_H+
 hcFilePrefix H+
 logParams 0
 m =m_p;
 q =e;
 n 10e6
 V -100e3
 T 1e5
 #vth
 boundaryFUNC
 {
  obstacleNoObstacle
  sideWallPeriodicYAbsorbZ
  frontWallAbsorb
  backWallAbsorb
 }
 #macroParticlesPerDt 
 propagateV 1
 accumulate 1
 split 1
 join 1
}

