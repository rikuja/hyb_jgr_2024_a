# A spherical Venus run with similar parameters as venus_jgr_2013.cfg

# See also spherical Venus run in:

# Dyadechkin S., E. Kallio and R. Jarvinen (2013), A new 3-D spherical
# hybrid model for solar wind interaction studies, J. Geophys. Res.
# Space Physics, 118, 5157â€“5168, doi:10.1002/jgra.50497.

# Use Makefile option:
# USE_SPHERICAL_COORDINATE_SYSTEM := true

# Pi [] (real)
#const Pi 3.1415926536e+00

# Speed of light in vacuum [m/s] (real)
#const c 2.9979245800e+08

# Electron charge magnitude [C] (real)
#const e 1.6021765300e-19

# Boltzmann constant [J/K] (real)
#const k_B 1.3806505000e-23

# Permeability of free space [N A^-2] (real)
#const mu_0 1.2566370614e-06

# Permittivity of free space [F/m] (real)
#const eps_0 8.8541878176e-12

# Gravitational constant [m^3 kg^-1 s^-2] (real)
#const G 6.6742000000e-11

# Astronomical unit [m] (real)
#const AU 1.4959787066e+11

# Adiabatic constant [] (real)
#const gamma 1.6666666667e+00

# Atomic mass unit [kg] (real)
#const amu 1.6605388600e-27

# Electron mass [kg] (real)
#const m_e 9.1093825746e-31

# Proton mass [kg] (real)
#const m_p 1.6726217160e-27

# Atomic hydrogen mass [kg] (real)
#const m_H 1.6737235385e-27

# Hydrogen molecule mass [kg] (real)
#const m_H2 3.3473142340e-27

# Atomic deuterium (hydrogen-2) mass [kg] (real)
#const m_2H 3.3435833564e-27

# Atomic tritium (hydrogen-3) mass [kg] (real)
#const m_3H 5.0082669003e-27

# Atomic helium-3 mass [kg] (real)
#const m_3He 5.0082338555e-27

# Atomic helium mass [kg] (real)
#const m_He 6.6464761621e-27

# Atomic nitrogen mass [kg] (real)
#const m_N 2.3258736072e-26

# Molecular nitrogen mass [kg] (real)
#const m_N2 4.6517339301e-26

# Atomic oxygen mass [kg] (real)
#const m_O 2.6567625437e-26

# Molecular oxygen mass [kg] (real)
#const m_O2 5.3135250873e-26

# Molecular methane mass [kg] (real)
#const m_CH4 2.6639360715e-26

# Atomic sodium (natrium) mass [kg] (real)
#const m_Na 3.8175405272e-26

# Mercury mass [kg] (real)
#const M_Me 3.3020000000e+23

# Mercury radius [m] (real)
#const R_Me 2.4397000000e+06

# Venus mass [kg] (real)
#const M_V 4.8685000000e+24

# Venus radius [m] (real)
#const R_V 6.0518000000e+06

# Moon mass [kg] (real)
#const M_Mo 7.3490000000e+22

# Moon radius [m] (real)
#const R_Mo 1.7371000000e+06

# Mars mass [kg] (real)
#const M_Ma 6.4185000000e+23

# Mars radius [m] (real)
#const R_Ma 3.3900000000e+06

# Titan mass [kg] (real)
#const M_T 1.3455000000e+23

# Titan radius [m] (real)
#const R_T 2.5750000000e+06

# Simulation time [s] (real)
#const t 0.0000000000e+00

# Template real variable [-] (real)
#tempRealA 0.0000000000e+00

# Template real variable [-] (real)
#tempRealB 0.0000000000e+00

# Template real variable [-] (real)
#tempRealC 0.0000000000e+00

# Template int variable [-] (integer)
#tempIntA 0

# Template int variable [-] (integer)
#tempIntB 0

# Template int variable [-] (integer)
#tempIntC 0

# Object ID for the Hybrid Web Archive: 0 = Unspecified, 1 = Mercury, 2 = Venus, 3 = Earth, 4 = Moon, 5 = Mars, 6 = Asteroid, 7 = Ganymede, 8 = Titan, 9 = Pluto, 10 = Comet, 11 = Heliosphere/solar wind, 12 = Exoplanet [-] (integer)
iniconst objectIdHWA 2

# Planet radius [m] (real)
iniconst R_P =R_V;

# Planet mass [kg] (real)
iniconst M_P =M_V;

# Fields U_e and U are put explicitly to zero inside this radius [m] (real)
R_zeroFields =R_P 300e3 +;

# Field propagation using predictor corrector scheme [] (boolean)
fieldPredCor 0

# Electron pressure effect [] (boolean) (Define electron temperature if this is true)
electronPressure 1

# Electron temperature (K)
Te 1e4

# Gravitational acceleration for ions [-] (boolean)
useGravitationalAcceleration 0

# Calculation of J using jstag scheme [-] (boolean)
useJstag 1

# Calculation of Ue separately in nodes [-] (boolean)
useNodeUe 1

# Base grid cell size [m] (real)
iniconst dx =R_P 20.0 /;

# Base grid cell size [m] (real)
iniconst sph_dy =R_P 20.0 /;

# Base grid cell size [m] (real)
iniconst sph_dz =R_P 20.0 /;

# Simulation timestep [s] (real)
dt =dx 15129.5e3 /;

# Field propagation timestep - should be mostly same as dt [s] (real)
dtField =dt;

# Constraint: maximum ion velocity [m/s] (real)
vi_max 5000e3

# Constraint: maximum electron velocity [m/s] (real)
Ue_max 5000e3

# Constraint: minimum charge density in a cell, rho_q = max(rho_q, rho_q_min) [C/m^3] (real)
rho_q_min =1e5 e *;

# Number of density variable smoothing [] (integer)
densitySmoothingNumber 0

# Number of electric field smoothing [] (integer)
electricFieldSmoothingNumber 1

# Duration of simulation run [s] (real)
t_max = 400.1;

# Save interval for output files [s] (real)
saveInterval 20.0

# Whether to save HC files (0 = no, 1 = binary, 2 = ascii) [-] (integer)
saveHC 1

# Whether to save VTK files (0 = no, 1 = binary, 2 = ascii) [-] (integer)
saveVTK 1

# Whether to save (1) or not (0) temporally averaged parameters [-] (boolean)
averaging 1

# Whether to save (1) or not (0) plasma hc-file [-] (boolean)
plasma_hcfile 0

# Whether to save (1) or not (0) dbug hc-file [-] (boolean)
dbug_hcfile 0

# Include bg charge density (1) or not (0) in average hc-file [-] (boolean)
bg_in_avehcfile 0

# Save extra hc-files [-] (boolean)
iniconst saveExtraHcFiles 1

# Breakpointing intervals (first = cyclic, second = unique file names) - PRODUCES LARGE FILES! [s] (real)
#wsDumpInterval 0 0

# Input parameter dynamics interval [s] (real)
inputInterval 1.0

# Logging interval [s] (real)
logInterval 1.0

# Grid Refinement function [-] (function)
#iniconst gridRefinementFUNC { }

# Maximum allowed grid refinement level [] (integer)
iniconst maxGridRefinementLevel 0

# Forbid split and join (spatial) function [-] (function)
#forbidSplitAndJoinFUNC { }

# Background charge density [-] (function)
bgChargeDensityFUNC { sph_smoothObstacle =R_P; =R_P 0.2 *; =1e6 e *; }

# Polarization electric field is neglected inside this radius [m] (real)
#R_zeroPolarizationField =R_P 200e3 +;

# Average amount of macroparticles per cell [#] (integer)
macroParticlesPerCell 30

# Macro particle splitting [-] (boolean)
useMacroParticleSplitting 1

# Macro particle joining [-] (boolean)
useMacroParticleJoining 1

# Deviation allowed in splitting and joining, and probability method (0=old,1=new) (real)
splitJoinDeviation 0.2 0

# Macroparticle splitting function (function)
splitFUNC {splitDefault 0.5}

# Macroparticle joining function (function)
joinFUNC {joinDefault}

# Resistivity function [-] (function)
resistivityFUNC
{
 sph_resistivityConstantOutsideR 0.02 =R_zeroFields;
}

# Simulation Box: x_min [m] (fastreal)
iniconst box_xmin = 1.0 R_P * dx 2.0 * -;

# Simulation Box: x_max [m] (fastreal)
iniconst box_xmax = 3.0 R_P * dx 2.0 * -;

# Simulation Box: y_min [m] (fastreal)
iniconst box_ymin = -1.0 R_P 1.0 / *; 

# Simulation Box: y_max [m] (fastreal)
iniconst box_ymax = 1.0 R_P 1.0 / *;

# Simulation Box: z_min [m] (fastreal)
iniconst box_zmin = -1.0 R_P 1.0 / *;

# Simulation Box: z_max [m] (fastreal)
iniconst box_zmax = 1.0 R_P 1.0 / *;

# Simulation Box: angle_of_theta_axis (fastreal) // Simulation box: angle of theta axis (0 or pi/2), 0 - parallel to solar wind, pi/2 - perpendicular [rad] (initial value constant)
#iniconst angle_of_theta_axis = 0.5 Pi *;

# Simulation Box: Truncation theta angle (fastreal)
iniconst sph_alpha_theta = 1e-5;

# Simulation Box: Truncation phi angle (fastreal)
iniconst sph_alpha_phi = 0.0;

# Simulation Box: sph_theta_min (fastreal) // (-0.495)
iniconst sph_theta_min = 0.0 sph_alpha_theta + Pi *;

# Simulation Box: sph_theta_max (fastreal) // (0.495)
iniconst sph_theta_max = 1.0 sph_alpha_theta - Pi *;

# Simulation Box: sph_phi_min (fastreal) // (-1.0)
iniconst sph_phi_min = -1.0 sph_alpha_phi + Pi *;

# Simulation Box: sph_phi_max (fastreal) // (1.0)
iniconst sph_phi_max = 1.0 sph_alpha_phi - Pi *;

# Type of spherical boundary conditions (0), (1) (int)
sph_BC_type 1

# Type of spherical boundary conditions. Don't use (0) or use (1) ghost cells (int)
sph_BC_use_ghost_cell 1

# Type of particle propagation: along spherical axis (0) or along Cartesian (1) [-] (int)
sph_propagation_type 1

# Direction of particle propagation: along x-axis (0) or along z-axis (1) [-] (int)
# All other functions are also depend on this parameter (e.g. magnetic field boundary condition ...)
sph_propagation_dir 1

# Which coordinate grid is used for visualisation. Hybrid (0) or spherical (1) (int)
sph_coordinate_grid_visual 1

# Constraint: simulation box tight limit factor [] (fastreal)
iniconst box_eps 1.0e-2

# Limit for the maximum magnetic field strength [T] (real)
B_limit 10000.0e-9

# Electric field cut value (used if Ecut > 0). dx*max(dB/dt) ~ Ecut [V/m] (real)
Ecut -100

# Interplanetary Magnetic Field: x-component [T] (real)
iniconst SW_Bx 0.0e-9

# Interplanetary Magnetic Field: y-component [T] (real)
SW_By 10.0e-9

# Interplanetary Magnetic Field: z-component [T] (real)
SW_Bz 0.0e-9

# Magnetic field boundary conditions (+X, +/-Y, +/-Z, -X, perpendicular) [] (boolean)
Bboundaries 0 0 0 0 0

# Magnetic field x-components at the box boundary [T] (real)
boundary_Bx 0.0

# Magnetic field y-components at the box boundary [T] (real)
boundary_By =SW_By;

# Magnetic field z-components at the box boundary [T] (real)
boundary_Bz =SW_Bz;

# Initial magnetic field functions [-] (function)
#iniconst initialMagneticFieldFUNC { }

# Constant magnetic field functions [-] (function)
#iniconst constantMagneticFieldFUNC { }

population ionospheric
{
 idStr ionospheric_O+
 hcFilePrefix O+
 logParams 0
 m =m_O;
 q =e;
 T 2000
 #vth 
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 totalRate 1.0e25
 R =R_P 400e3 +;
 distFunc
 {
  sph_ionoCosSzaDayConstantNight 1.0 0.1 1000e3 =R;
 }
 macroParticlesPerDt 150
 propagateV 1
 accumulate 1
 split 1
 join 1
}

# hot and thermal exospheric H+ photoions
population exospheric
{
 idStr exospheric_H+
 hcFilePrefix H+planet
 logParams 0
 m =m_p;
 q =e;
 T =111 285 + 2 /;
 #vth 
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 totalRate 6.42e24
 R =R_P 400e3 +;
 distFunc
 {
  sph_neutralDensityVenusHydrogen =R;
  ionizationConstant 1.39e-7
  sph_shadow =R_P;
 }
 macroParticlesPerDt 100
 propagateV 1
 accumulate 1
 split 1
 join 1 
}

# hot exospheric O+ photoions
population exospheric
{
 idStr exospheric_O+
 hcFilePrefix O+
 logParams 0
 m =m_O;
 q =e;
 T =6400 4847 + 2 /;
 #vth 
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 totalRate 4.09e24
 R =R_P 400e3 +;
 distFunc
 {
  sph_neutralDensityVenusOxygenHot =R_P;
  ionizationConstant 4.55e-7
  sph_shadow =R_P;
 }
 macroParticlesPerDt 50
 propagateV 1
 accumulate 1
 split 1
 join 1 
}

population ionospheric
{
 idStr ionospheric_H+
 hcFilePrefix H+planet
 logParams 0
 m =m_p;
 q =e;
 T 2000
 #vth 
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 totalRate 5.0e24
 R =R_P 400e3 +;
 distFunc
 {
  sph_ionoCosSzaDayConstantNight 1.0 0.1 1000e3 =R;
 }
 macroParticlesPerDt 150
 propagateV 1
 accumulate 1
 split 1
 join 1
}

population uniform
{
 idStr initial_plasma
 hcFilePrefix H+
 logParams 0
 m =m_p;
 q =e;
 n 1.5e6
 T 1e5
 #vth
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 V 0
 #macroParticlesPerDt
 propagateV 1
 accumulate 1
 split 0
 join 1
}

population solarwind
{
 idStr solarwind_H+
 hcFilePrefix H+
 logParams 0
 m =m_p;
 q =e;
 n 14e6
 V -430e3
 T 1e5
 #vth
 boundaryFUNC
 {
  obstacleAbsorb_sph =R_P 200e3 +;
  sideWallAbsorb
  frontWallAbsorb
  backWallAbsorb
 }
 #macroParticlesPerDt
 propagateV 1
 accumulate 1
 split 1
 join 1
}
